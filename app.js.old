// ファイル構成：
// - app.js
// - data/locations.json
// - data/items.json
// - data/members.json
// - views/landing.ejs
// - views/dashboard.ejs
// - views/location.ejs
// - public/

// app.js
const express = require('express');
const fs = require('fs');
const path = require('path');
const session = require('express-session');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = 3000;

app.use(session({
  secret: 'hogehogemonger',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 7 * 24 * 60 * 60 * 1000 }
}));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// JSON utility
const loadJSON = file => JSON.parse(fs.readFileSync(file, 'utf8'));
const saveJSON = (file, data) => fs.writeFileSync(file, JSON.stringify(data, null, 2), 'utf8');

// ===== ランディングページ =====
app.get('/', (req, res) => {
  res.render('landing');
});


// ===== ロケーション詳細 =====
app.get('/location/:locationId', (req, res) => {
  const locationId = req.params.locationId;
  const locations = loadJSON('./data/locations.json');
  const location = locations.find(loc => loc.location_id === locationId);

  const items = loadJSON('./data/items.json').filter(i => i.location_id === locationId);
  const members = loadJSON('./data/members.json');
  const ownerEntry = members.find(m => m.location_id === locationId);
  const itemOwner = ownerEntry ? ownerEntry.user_id : 'guest';

  res.render('location', {
    locationId,
    locationName: location ? location.location_name : '(不明)',
    items,
    itemOwner
  });
});

app.get('/login', (req, res) => {
  res.render('login'); // views/login.ejs を後ほど作成
});

app.post('/login', (req, res) => {
  const { user_name, email } = req.body;
  const users = loadJSON('./data/users.json');

  const found = users.find(u => u.user_name === user_name && u.email === email);

  if (found) {
    req.session.user = found; // セッションに保存
    res.redirect(`/user/${found.user_id}`);
  } else {
    res.send('<p>ユーザーが見つかりません。<a href="/login">戻る</a></p>');
  }
});

app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/');
  });
});

// === ダッシュボード（ログインユーザー） ===
app.get('/user', (req, res) => {
  const sessionUser = req.session.user;
  if (!sessionUser) return res.redirect('/login');

  const members = loadJSON('./data/members.json');
  const locations = loadJSON('./data/locations.json');

  const myLocations = members
    .filter(m => m.user_id === sessionUser.user_id)
    .map(m => m.location_id);

  const locationList = locations.filter(loc => myLocations.includes(loc.location_id));
  res.render('dashboard', { userId: sessionUser.user_id, locations: locationList, sessionUser });
});

// === 場所の追加（セッションベース） ===
app.post('/user/add-location', (req, res) => {
  const sessionUser = req.session.user;
  if (!sessionUser) return res.redirect('/login');

  const { location_name } = req.body;
  if (!location_name) return res.redirect('/user');

  const locations = loadJSON('./data/locations.json');
  const members = loadJSON('./data/members.json');

  const newId = 'loc_' + Math.random().toString(36).substr(2, 8);
  const now = new Date().toISOString();

  locations.push({
    location_id: newId,
    location_name,
    created_by: sessionUser.user_id,
    created_at: now
  });

  members.push({
    user_id: sessionUser.user_id,
    location_id: newId,
    joined_at: now
  });

  saveJSON('./data/locations.json', locations);
  saveJSON('./data/members.json', members);

  res.redirect('/user');
});


// ここから未修正
// === アイテム追加 ===
app.post('/location/:locationId/add', (req, res) => {
  const locationId = req.params.locationId;
  const items = loadJSON('./data/items.json');
  const newItem = {
    item_id: 'itm_' + Math.random().toString(36).substr(2, 8),
    item_name: req.body.item_name,
    location_id: locationId,
    yellow: parseInt(req.body.yellow || '1', 10),
    green: parseInt(req.body.green || '3', 10),
    purple: parseInt(req.body.purple || '6', 10),
    amount: parseInt(req.body.amount || '0', 10),
    status: calculateStatus(req.body.amount, req.body.yellow, req.body.green, req.body.purple),
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };

  items.push(newItem);
  fs.writeFileSync('./data/items.json', JSON.stringify(items, null, 2), 'utf8');
  res.redirect(`/location/${locationId}`);
});

// === アイテム数の更新 ===
app.post('/location/:locationId/update', (req, res) => {
  const locationId = req.params.locationId;
  const { item_id, new_amount } = req.body;
  const items = loadJSON('./data/items.json');

  const target = items.find(i => i.item_id === item_id);
if (target) {
  target.amount = Number(new_amount);
  target.updated_on = new Date().toISOString();
  target.status = calculateStatus(target.amount, target.yellow, target.green, target.purple); // ←追加
  saveJSON('./data/items.json', items);
}

  res.redirect(`/location/${locationId}`);
});

function calculateStatus(amount, yellow, green, purple) {
  if (amount >= purple) return 'Purple';
  if (amount >= green) return 'Green';
  if (amount >= yellow) return 'Yellow';
  return 'Red';
}


app.post('/add-member', (req, res) => {
  const { location_id, user_name } = req.body;
  if (!location_id || !user_name) return res.redirect(`/location/${location_id || ''}`);

  const users = loadJSON('./data/users.json');
  const members = loadJSON('./data/members.json');

  let user = users.find(u => u.user_name === user_name);
  if (!user) {
    return res.send(`<p>ユーザ「${user_name}」は存在しません。<a href="/user/add?name=${user_name}&location=${location_id}">作成しますか？</a></p>`);
  }

  const already = members.some(m => m.user_id === user.user_id && m.location_id === location_id);
  if (!already) {
    members.push({
      user_id: user.user_id,
      location_id,
      joined_at: new Date().toISOString()
    });
    saveJSON('./data/members.json', members);
  }

  res.redirect(`/location/${location_id}`);
});

app.get('/user/add', (req, res) => {
  const { name, location } = req.query;
  if (!name) return res.redirect('/');

  const users = loadJSON('./data/users.json');
  const members = loadJSON('./data/members.json');

  // 新しいユーザを作成
  const user_id = `usr_${Math.random().toString(36).slice(2, 10)}`;
  users.push({ user_id, user_name: name });
  saveJSON('./data/users.json', users);

  // 初期参加場所があれば、登録
  if (location) {
    members.push({ user_id, location_id: location, joined_at: new Date().toISOString() });
    saveJSON('./data/members.json', members);
  }

  res.redirect(`/user/${user_id}`);
});

// ユーザ作成ページ
app.get('/new-user', (req, res) => {
  res.render('new-user');
});


// ユーザ作成処理
app.post('/new-user', (req, res) => {
  const users = loadJSON('./data/users.json');
  const newId = 'usr_' + Math.random().toString(36).substring(2, 8);
  const userName = req.body.user_name.trim();

  if (!userName) {
    return res.send('ユーザ名が未入力です');
  }

  users.push({
    user_id: newId,
    user_name: userName,
    created_at: new Date().toISOString()
  });

  saveJSON('./data/users.json', users);

  // ダッシュボードへリダイレクト
  res.redirect(`/user/${newId}`);
});

app.post('/user/:userId/confirm-add', (req, res) => {
  const { userId } = req.params;
  const { member_name, location_id } = req.body;
  const users = loadJSON('./data/users.json');
  const members = loadJSON('./data/members.json');

  const newUserId = 'usr_' + Math.random().toString(36).slice(2, 8);
  users.push({
    user_id: newUserId,
    user_name: member_name,
    created_at: new Date().toISOString()
  });
  saveJSON('./data/users.json', users);

  members.push({
    user_id: newUserId,
    location_id,
    joined_at: new Date().toISOString()
  });
  saveJSON('./data/members.json', members);

  res.redirect(`/user/${userId}`);
});

app.post('/go-to-dashboard', (req, res) => {
  const { user_name } = req.body;
  const users = loadJSON('./data/users.json');

  const user = users.find(u => u.user_name === user_name);
  if (user) {
    res.redirect(`/user/${user.user_id}`);
  } else {
    res.send(`
      <p>ユーザー「${user_name}」は存在しません。</p>
      <p><a href="/user/add?name=${encodeURIComponent(user_name)}">ユーザーを作成しますか？</a></p>
    `);
  }
});

const { v4: uuidv4 } = require('uuid'); // 上で一度だけ宣言

// GET: ユーザー登録ページ
app.get('/register', (req, res) => {
  res.render('register');
});

// POST: ユーザー登録処理
app.post('/register', (req, res) => {
  const { user_name, email } = req.body;
  if (!user_name || !email) {
    return res.redirect('/register');
  }

  const users = loadJSON('./data/users.json');
  const existing = users.find(u => u.user_name === user_name || u.email === email);

  if (existing) {
    return res.send('<p>同じユーザー名またはメールアドレスが既に存在します。<a href="/register">戻る</a></p>');
  }

  const newUser = {
    user_id: 'usr_' + uuidv4().slice(0, 8),
    user_name,
    email,
    created_at: new Date().toISOString()
  };

  users.push(newUser);
  saveJSON('./data/users.json', users);

  res.redirect(`/user/${newUser.user_id}`);
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
