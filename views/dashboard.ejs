<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>ダッシュボード</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <h1><%= sessionUser.user_name %> さんのアイテムの状況</h1>

  <h2>要補充リスト</h2>
  <ul id="replenishList">
    <li>読み込み中...</li>
  </ul>
  <p>在庫からすぐに補充したほうがいいですよ</p>
  <button id="sendReplenishToLine" class="line-btn" data-user-id="<%= userId %>">
    <i class="fab fa-line"></i> 要補充リストをLINEで送信
  </button>

  <h2>買い物リスト</h2>
  <ul id="shoppingList">
    <li>読み込み中...</li>
  </ul>
  <p>頼まれる前に買っておくとポイント高そう</p>
  <button id="sendShoppingToLine" class="line-btn" data-user-id="<%= userId %>">
    <i class="fab fa-line"></i> 買い物リストをLINEで送信
  </button>

  <h2>あなたの場所一覧</h2>
  <div class="tile-container">
    <% locations.forEach(loc => { %>
      <div class="tile">
        <h3><a href="/location/<%= loc.location_id %>"><%= loc.location_name %></a></h3>
        <!-- アイテムリスト -->
        <ul style="margin:0; padding-left:1em;">
        <% (loc.items || []).forEach(item => { %>
          <li style="margin-bottom:2px;">
            <%- include('item_partial', {item: item, locationId: loc.location_id }) %>
          </li>
        <% }) %>
        </ul>
        <!-- ユーザー一覧 -->
        <div style="margin-top:0.5em; font-size:0.95em; color:#888;">
          <i class="fa-solid fa-users"></i> 
          <% (loc.members || []).map(m => m.user_name).join(' , ') %>
        </div>
      </div>
    <% }) %>
  </div>
  <div class="form-box">
    <form action="/user/<%= sessionUser.user_id %>/add-location" method="POST">
      <input type="text" name="location_name" placeholder="新しい場所名" required>
      <button type="submit">場所を追加</button>
    </form>
  </div>
  
  
  <p><a href="/user/<%= sessionUser.user_id %>/edit">ユーザー情報の編集</a>｜<a href="/logout">ログアウト</a></p>
<script>
// location.ejsと同じダイアログ
function openAmountEdit(locationId, itemId, current) {
  const newVal = prompt('新しい在庫数を入力してください', current);
  if (newVal === null) return false;
  const val = parseInt(newVal, 10);
  if (isNaN(val) || val < 0) {
    alert('0以上の数字を入力してください');
    return false;
  }
  fetch(`/location/${locationId}/item/${itemId}/amount`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `action=set&value=${encodeURIComponent(val)}`
  }).then(res => {
    if (res.ok) {
      location.reload();
    } else {
      alert('在庫数の更新に失敗しました');
    }
  });
  return false;
};
document.addEventListener('DOMContentLoaded', () => {
  document.body.addEventListener('click', e => {
    // ±ボタン用
    if (e.target.matches('.decrement-btn') && !e.target.disabled) {
      const btn = e.target;
      const locationId = btn.getAttribute('data-location-id');
      const itemId = btn.getAttribute('data-item-id');
      fetch(`/location/${locationId}/item/${itemId}/amount`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'action=decrement'
      }).then(res => {
        if (res.ok) location.reload();
        else alert('在庫数の更新に失敗しました');
      });
      return;
    }

    if (e.target.matches('.increment-btn')) {
      const btn = e.target;
      const locationId = btn.getAttribute('data-location-id');
      const itemId = btn.getAttribute('data-item-id');
      fetch(`/location/${locationId}/item/${itemId}/amount`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'action=increment'
      }).then(res => {
        if (res.ok) location.reload();
        else alert('在庫数の更新に失敗しました');
      });
      return;
    }

    // inuseボタン用（ここでクリック判定）
    const inuseBtn = e.target.closest('.inuse-btn');
    if (inuseBtn && !inuseBtn.disabled) {
      e.preventDefault();

      const locationId = inuseBtn.getAttribute('data-location-id');
      const itemId = inuseBtn.getAttribute('data-item-id');
      const currentInuse = inuseBtn.getAttribute('data-current-inuse');
      const amount = inuseBtn.getAttribute('data-amount');

      fetch(`/location/${locationId}/item/${itemId}/inuse`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `current_inuse=${encodeURIComponent(currentInuse)}&amount=${encodeURIComponent(amount)}`
      }).then(res => {
        if (res.ok) {
          location.reload();
        } else {
          alert('ステータス変更に失敗しました');
        }
      }).catch(() => {
        alert('通信エラーが発生しました');
      });
      return;
    }
  });

  async function fetchAndRenderList(url, containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '<li>読み込み中...</li>';
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error('通信失敗');
      const items = await response.json();
      if (items.length === 0) {
        container.innerHTML = '<li>該当するアイテムはありません</li>';
        return;
      }
      container.innerHTML = '';
        items.forEach(item => {
          const li = document.createElement('li');
          li.textContent = `${item.item_name}@${item.location_name}（現在数: ${item.amount}）`;
          container.appendChild(li);
        });
    } catch (e) {
      container.innerHTML = '<li>データの取得に失敗しました</li>';
    }
  }

  const userId = '<%= userId %>';
  fetchAndRenderList(`/api/dashboard/${userId}/replenish`, 'replenishList');
  fetchAndRenderList(`/api/dashboard/${userId}/shopping`, 'shoppingList');

  // LINE送信ボタンの処理
  document.getElementById('sendReplenishToLine').addEventListener('click', async function() {
    const btn = this;
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 送信中...';
    
    try {
      const response = await fetch(`/api/dashboard/${userId}/line/replenish`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const result = await response.json();
      
      if (response.ok) {
        alert('✅ ' + result.message);
      } else {
        alert('❌ ' + (result.error || 'エラーが発生しました'));
      }
    } catch (error) {
      alert('❌ 通信エラーが発生しました');
    } finally {
      btn.disabled = false;
      btn.innerHTML = originalText;
    }
  });

  document.getElementById('sendShoppingToLine').addEventListener('click', async function() {
    const btn = this;
    const originalText = btn.innerHTML;
    
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 送信中...';
    
    try {
      const response = await fetch(`/api/dashboard/${userId}/line/shopping`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const result = await response.json();
      
      if (response.ok) {
        alert('✅ ' + result.message);
      } else {
        alert('❌ ' + (result.error || 'エラーが発生しました'));
      }
    } catch (error) {
      alert('❌ 通信エラーが発生しました');
    } finally {
      btn.disabled = false;
      btn.innerHTML = originalText;
    }
  });
});
</script>
</body>
</html>
